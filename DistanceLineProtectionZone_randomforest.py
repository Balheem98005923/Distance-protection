# -*- coding: utf-8 -*-
"""DifferentialProtectionCurve-RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19afitvPEO5yfDkP6h_Wp3kridGV9Hy2e
"""

#Import scikit-learn dataset library
from sklearn import datasets
import pandas as pd
import numpy as np


#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import StandardScaler

from sklearn.ensemble import RandomForestClassifier

from sklearn.ensemble import RandomForestClassifier

from google.colab import files
uploaded = files.upload()

#Load dataset
datasets = pd.read_csv('DistanceDataset.csv', sep=',')
X = datasets.iloc[:, [0,1]].values
Y = datasets.iloc[:, 2].values
datasets.head()

# Splitting the dataset into the Training set and Test set
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

scaler = StandardScaler()
scaler.fit(X_Train)

X_train1 = scaler.transform(X_Train)
X_train1 = X_train1.astype(np.float32)

X_test1 = scaler.transform(X_Test)
X_test1 = X_test1.astype(np.float32)

n = 0
for item in Y_Train:
  if item == 1.03:
    Y_Train[n] = 1
  elif item == 0:
    Y_Train[n] = 0
  elif item == 0.23:
    Y_Train[n] = 2
  elif item == 0.43:
    Y_Train[n] = 3
  else:
    Y_Train[n] = 4
  n += 1

n = 0
for item in Y_Test:
  if item == 1.03:
    Y_Test[n] = 1
  elif item == 0:
    Y_Test[n] = 0
  elif item == 0.23:
    Y_Test[n] = 2
  elif item == 0.43:
    Y_Test[n] = 3
  else:
    Y_Test[n] = 4
  n += 1

#Create a Gaussian Classifier
model_RandomForestClassifier=RandomForestClassifier(n_estimators=100)

#Train the model using the training sets y_pred=clf.predict(X_test)
model_RandomForestClassifier.fit(X_train1,Y_Train)

# prediction on test set
y_pred=model_RandomForestClassifier.predict(X_test1)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(Y_Test, y_pred))

def find_nearest(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return array[idx], idx

x_sample = scaler.transform([[-12, -1]])
x_sample = scaler.transform([[14, -1]])
x_sample = scaler.transform([[10, -5]])
x_sample = scaler.transform([[6, -2.5]])

x_sample = x_sample.astype(np.float32)

predict = model_RandomForestClassifier.predict(x_sample)
predict_prob = model_RandomForestClassifier.predict_proba(x_sample)

print(predict)
print(predict_prob)